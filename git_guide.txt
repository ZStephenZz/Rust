git community book
	http://gitbook.liuhui998.com/index.html   



git status：查看仓库状态（整体角度，看有哪些变化）
git diff：查看具体发生了什么变化
	working tree工作区；index暂存区；head提交区
			    提交到暂存区中，就是建立索引。HEAD是指最新的一次提交。
	比较working tree工作区和index暂存区之间的差异
	git diff --cached/--staged
		比较暂存区文件和提交区的差异
		--staged is a synonym of --cached
	git diff HEAD
		显示工作区和提交区的差异
	git diff SHA1 SHA2
		比较两个历史版本之间的差异
“提交新文件”/“提交修改”
	1.git add
	2.git commit
“撤销”
	“版本回退”/“撤销暂存区的修改”
		git reset --hard commit_id
		“查看commit_id”
			git log：查看提交历史
			git reflog：查看命令历史。
				在回退后，想撤销这个动作时，用这个命令可以查到撤销前的commit_id
	“暂存区”
		git add将git仓库中所有的变化，保存到暂存区
	“丢弃工作区的修改”
		git checkout -- <file>
			让文件回到最近一次git commit或git add时的状态。
			没有“--”的话，变成了“切换分支”的命令
			本质：用版本库里的版本替换工作区的版本。
“删除”
	1.git rm <file>
	2.git commit

“关联远程仓库”
	git remote add origin XXX
“推送本地库的所有内容到远程库”
	git push -u origin master
		-u参数：把本地的master分支和远程的master分支关联起来。
“从远程库克隆”
	git clone XXX

---------------------------------------------分支管理------------------------------------
“创建分支”
	git checkout -b XXX
	-b参数：创建并切换到新分支
		相当与：1.git branch XXX  2.git checkout XXX
	git branch XXX
	创建新分支

流程：创建新分支->切换到新分支，工作，提交->切换到主分支->把新分支的内容合并到主分支

“合并指定分支到当前分支”
	1.git branch 当前分支
	2.git merge 指定分支
	
	git merge和git merge --no-ff的区别：
		--no-ff参数：使用普通模式合并。合并后的历史有分支，能看出来曾做过合并。

“删除分支”
	git branch -d XXX
	git branch -D XXX   丢弃一个没有被合并过的分支

合并时有冲突
	“查看冲突”
		git status
	“修改冲突”
		git使用“<<<<<<<，=======，>>>>>>>”在本件中标记出不同分支的内容
	“再次提交”

git stash三连
	“闪存当前工作内容”
		git stash
		使用场景：不好提交当前分支的内容，又需要创建新分支解决bug。
	“恢复闪存的内容”
		1.git stash apply  恢复  2.git stash drop  删除
		1.git stash pop  恢复并删除stash内容
	“查看闪存的内容”
		git stash list

“复制所做的修改到其他分支”
	场景：dev、master分支上有相同的bug，现在在dev分支上修复了bug，不想在master上重复劳动
	解决：git cherry-pick commit_id（复制一个指定commit到当前分支）

--------------------------------------------多人协作---------------------------------------------
“查看远程库信息”
	git remote
	git remote -v

“推送分支”
	1.git checkout <branch_name> 切换到想推送的本地分支
	2.git push origin <branch_name>

“关联本地分支和远程分支”
	git branch --set-upstream-to=<remote_branch> <local_branch>

---------------------------------------------标签------------------------------------------------
标签的作用：给commit做个可读的别名

“增加标签”
	git tag <tag_name>  给最近的一次commit加标签
	git tag <tag_name> <commit_id> 给指定的某次commit加标签
	git tag -a <tag_name> -m <tag_content> <commit_id> 给指定的commit加带说明的标签
“查看标签列表”
	git tag
“查看标签信息”
	git show <tag_name>
“删除标签”
	git tag -d <tag_name>

远程库
	“推送标签到远程”
		git push origin <tag_name>
		git push origin --tags  一次性推送所有标签
	“删除远程库的标签”
		1.git tag -d <tag_name>  删除本地的标签
		2.git push origin :refs/tags/<tag_name>  删除远程库的标签



